#!groovy

def sovLibrary = library(identifier: 'sovrin-aws-codebuild@master', retriever: modernSCM(
    github(credentialsId: 'sovbot-github', repoOwner: 'sovrin-foundation', repository: 'aws-codebuild-pipeline-plugin')
)).com.sovrin.pipeline

logger = sovLibrary.Logger.new(this)
notifier = sovLibrary.Notifier.new(this)
logger.setGlobalLevel('TRACE')

pipelineWrapper({

    //put code build containers inside a vpc under our dev account
    env.USE_VPC_CONFIG = true
    env.SOVRIN_REPO_HOST = '192.168.11.115'

    nodeWrapper {
        def osname = 'xenial'
        List projects = ['sovtoken', 'sovtokenfees']

        stage('Checkout sources from SCM') {
            checkout scm
        }

        def sovrinRepo = sovLibrary.SovrinRepo.new(this)
        def utils = sovLibrary.Utils.new(this)
        def buildCtx = sovLibrary.AwsCodeBuildHelper.BuildCtx.new('plugin',
            ['devops', 'sovtoken/sovtoken/__metadata__.py', 'sovtokenfees/sovtokenfees/__metadata__.py'])
        def awsCBHelper = sovLibrary.AwsCodeBuildHelper.new(this, buildCtx)


        stage('Upload source to S3') {
            awsCBHelper.uploadSourceToS3()
        }

        Map builds = projects.collectEntries { proj ->
            ["$osname:$proj": {

                def packageName = proj
                def prTag = "ci-$osname-$proj" // use ci project
                def srcVersion
                def lastRevision
                def debPVersion
                def goals = ['package']

                def ciImageTag

                stage('Get source version') {
                    srcVersion = utils.shStdout("SRC_DIR_NAME=$proj make -C devops src_version -s")
                    logger.info("Current source version: $srcVersion")
                }

                stage('Get last revision') {
                    lastRevision = sovrinRepo.getLastRevision {
                        delegate.packageName = packageName
                        packageSrcVersion = srcVersion
                        repoDistr = 'xenial-rc'
                        component = 'rc'
                    }

                    if (lastRevision) {
                        logger.info("Found last revision number: $lastRevision")
                    } else {
                        logger.info("No previous revision was found")
                    }
                }

                stage('Set release parameters') {
                    def releaseVersion =  env.BRANCH_NAME == 'stable' ? '' : "${lastRevision ? lastRevision[0] + 1: 1}.$BUILD_NUMBER"

                    debPVersion = utils.packageVersion('deb', srcVersion, releaseVersion)
                    logger.info("Package version for sovrin repo: $debPVersion")
                }

                stage("$osname:$proj: Resolve image tag") {
                    def _imgVersion = utils.shStdout("OSNAME=$osname make -C devops image_ci_version -s")
                    ciImageTag = "$_imgVersion-$osname-$proj-ci"
                    logger.info("CI docker image tag: $ciImageTag")
                }

                awsCBHelper.build() {
                    projectTag = prTag

                    // build spec for env image
                    envBuildSrc = ['devops', "${proj}/${proj}/__metadata__.py"] // TODO make more accurate
                    envBuildCmds = [
                        'export PROJECT_DIR=$PWD',
                        'make -C devops image_ci'
                    ]
                    envBuildEnvv = [
                        [name: 'OSNAME', value: osname],
                        [name: 'SRC_DIR_NAME', value: proj],
                        [name: 'DOCKER_NAME', value: awsCBHelper.buildCtx.projectName],
                        [name: 'DOCKER_TAG', value: ciImageTag],
                    ]

                    // env and build spec
                    imageTag = ciImageTag
                    buildspec = 'devops/aws-codebuild/buildspec.yml'
                    envv = [
                        [name: 'OSNAME', value: osname],
                        [name: 'MAKE_GOALS', value: 'package'],
                        [name: 'SRC_DIR_NAME', value: proj],
                        [name: 'ARTIFACTS', value: "devops/_build/$proj/*$packageName*.*"], // TODO more accurate here
                        [name: 'FPM_P_VERSION', value: debPVersion],
                    ]

                    onArtifacts = {
                        this.stage("$osname:$proj: Archive logs") {
                            utils.archiveArtifacts("logs/*.out*") {
                                truncate = true
                                allowEmptyArchive = true
                            }
                        }
                    }
                }


                stage('Upload debs to repos') {

                    String debName

                    dir("${awsCBHelper.buildCtx.projects[prTag].artifactsDir}") {
                        debName = utils.shStdout("ls $packageName*$debPVersion*.deb")

                        logger.info("Uploading debian package '$debName' to sovrin repo")
                        sovrinRepo.upload {
                            repoDistr = 'xenial'
                            component = 'rc'
                            packagePath = debName
                        }

                    }

                    notifier.email {
                        to = '$DEFAULT_RECIPIENTS ' + (this.env.LIBSOVTOKEN_DEF_RECIPIENTS ?: '')
                        subject = '$PROJECT_NAME - Build # $BUILD_NUMBER: ' + "new deb '$debName' was published"
                        body = ("New debian package '$debName' was built and published" +
                            '\n\nCheck console output at $BUILD_URL to view the results.')
                    }
                }

            }]
        }

        stage("Package and publish") {
            builds.failFast = false
            utils.parallel builds
        }
    }
}, { err ->
    if (err) {
        logger.error("Pipeline failed with the error $err")
    }

    stage("Build result notification") {
        notifier.email {
            to = '$DEFAULT_RECIPIENTS ' + (this.env.LIBSOVTOKEN_DEF_RECIPIENTS ?: '')
        }
    }
})
